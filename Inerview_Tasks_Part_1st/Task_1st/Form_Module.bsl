
#Область Сообщение             

Процедура  СообщитьНеЗаполненыеПоля()
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru = 'Не все поля заполнены!'");
	Сообщение.Сообщить();  
	
КонецПроцедуры   


#КонецОбласти




#Область Интервалы

&НаКлиенте
Процедура ПолучитьПересечение(Команда)    
	
	// Проверяем заполнение & сообщаем    
	Если НЕ ПроверитьЗаполнение() Тогда 
		СообщитьНеЗаполненыеПоля();
		Возврат;
	КонецЕсли;
	
	
	// Ввыводим сообщения о введенных Интервалах  
	ПоказатьИнтервал("Интервал 1 ", Период1.ДатаНачала, Период1.ДатаОкончания);
	ПоказатьИнтервал("Интервал 2 ", Период2.ДатаНачала, Период2.ДатаОкончания);  
	
	// получаем Пересечение и выводим    
	ПроверкаПересеченияИнтервалов(Период1, Период2);
	
КонецПроцедуры    

// Вызовы:
// два раза с формы
// один раз - сервер
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьИнтервал(НазваниеИнтервала, ДатаНачала, ДатаОкончания)                                                                                    
	
	Сообщение  = Новый СообщениеПользователю;
	Сообщение.Текст = СтрШаблон(НСтр("ru = '%1 : c %2 по %3'"), НазваниеИнтервала, Формат(ДатаНачала, "ДЛФ=DD"), Формат(ДатаОкончания, "ДЛФ=DD"));
	Сообщение.Сообщить();	
	
КонецПроцедуры        


// Заполняем  Таблицу Датами внутри границ Интервала
&НаСервереБезКонтекста
Функция ЗаполнитьТаблицуДат(Период) 
	
	ЛеваяГраница = Период.ДатаНачала; 
	ПраваяГраница = Период.ДатаОкончания;
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Пока ЛеваяГраница <= ПраваяГраница Цикл 
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Дата = ЛеваяГраница;
		
		//Увеличиваем на кол-во секунд в сутках 
		// 60* 60 * 24 = 86 400
		ЛеваяГраница = ЛеваяГраница + 86400;
		
	КонецЦикла;
	Возврат ТаблицаДат;    
	
КонецФункции  

// 1. получаем таблицы
// 2. отдаем в Запрос через Параметры  
// 3. внутренним соединением Получаем Пересечение
// 4. определяем границы Пересечения
// 5. сообщаем границы Пересечения
&НаСервереБезКонтекста
Процедура ПроверкаПересеченияИнтервалов(Период1, Период2)   
	
	ТаблицаИнтервала1 = ЗаполнитьТаблицуДат(Период1);  
	ТаблицаИнтервала2 = ЗаполнитьТаблицуДат(Период2);          
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДат1.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ТаблицаДат_Интервал_1
	|ИЗ
	|	&ТаблицаДат1 КАК ТаблицаДат1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДат2.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ТаблицаДат_Интервал_2
	|ИЗ
	|	&ТаблицаДат2 КАК ТаблицаДат2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДат_Интервал_1.Дата КАК ДатаМаксимум,
	|	ВТ_ТаблицаДат_Интервал_2.Дата КАК ДатаМинимум
	|ПОМЕСТИТЬ ВТ_ТаблицаДат_Пересечение
	|ИЗ
	|	ВТ_ТаблицаДат_Интервал_1 КАК ВТ_ТаблицаДат_Интервал_1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаДат_Интервал_2 КАК ВТ_ТаблицаДат_Интервал_2
	|		ПО ВТ_ТаблицаДат_Интервал_1.Дата = ВТ_ТаблицаДат_Интервал_2.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДат_Пересечение.ДатаМаксимум КАК ДатаМаксимум,
	|	ВТ_ТаблицаДат_Пересечение.ДатаМинимум КАК ДатаМинимум
	|ИЗ
	|	ВТ_ТаблицаДат_Пересечение КАК ВТ_ТаблицаДат_Пересечение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТ_ТаблицаДат_Пересечение.ДатаМинимум) КАК ДатаМинимум,
	|	МАКСИМУМ(ВТ_ТаблицаДат_Пересечение.ДатаМаксимум) КАК ДатаМаксимум
	|ИЗ
	|	ВТ_ТаблицаДат_Пересечение КАК ВТ_ТаблицаДат_Пересечение";       
	
	
	Запрос.УстановитьПараметр("ТаблицаДат1",ТаблицаИнтервала1);
	Запрос.УстановитьПараметр("ТаблицаДат2",ТаблицаИнтервала2);  
	
	РезультатМассив = Запрос.ВыполнитьПакет();
	
	Пересечение = РезультатМассив[3];
	
	// проверка пересечение
	Если Пересечение.Пустой() Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Интервалы не пересекаются !' ");
		Сообщение.Сообщить();	
		Возврат;
	КонецЕсли;       
	
	ГраницыПересечения = РезультатМассив[4];  
	
	РезультатГраницы = ГраницыПересечения.Выбрать();  
	
	РезультатГраницы.Следующий();
	
	ПоказатьИнтервал("Результат", РезультатГраницы.ДатаМинимум, РезультатГраницы.ДатаМаксимум); 
	
	
КонецПроцедуры      


#КонецОбласти

# Область Скобки        


// Считаем Скобки попарно
// "нормальное" состояние счетчика "0"  
// объвляем сами Скобки
// сравниваем
// скобка (  увеличиваем на единицу
// скобка  )  уменьшаем  на единицу
// счетчик меньше нуля → считаем что не хватает скобки ( вначале
// обходим снова
// нулевой - ВСЕ ОК
// добавляем закрывающие скобки в конец количеством, равным счетчику 
&НаКлиенте
Процедура ПолучитьСтроку(Команда)
	
	// проверяем Заполнение
	Если ПустаяСтрока(ИсходнаяСтрока)Тогда		
		СообщитьНеЗаполненыеПоля();		
		Возврат;
	КонецЕсли;      
	
	// "объявляем" Скобки
	ОткрывающаяСкобка = "("; 
	ЗакрывающаяСкобка = ")";  
		
	// возможны повторные нажатия	
	СтрокаРезультат = ""; 
	// Декларируем результат
	СтрокаРезультат = ИсходнаяСтрока; 
	
	// Флаг завершения
	ОбходСтрокиЗавершен = Ложь;     	
	
	Пока НЕ ОбходСтрокиЗавершен Цикл
		
		Счетчик = 0;
		
		КоличествоСимволов = СтрДлина(СтрокаРезультат);
		
		// Обход
		Для ТекущаяПозицияОбхода = 1 по КоличествоСимволов Цикл	
			
			ТекущийСимвол = Сред(СтрокаРезультат, ТекущаяПозицияОбхода, 1);
			
			Если ТекущийСимвол = ОткрывающаяСкобка Тогда 			
				Счетчик = Счетчик + 1;         				
			ИначеЕсли ТекущийСимвол = ЗакрывающаяСкобка Тогда  
				Счетчик = Счетчик - 1; 
			Иначе 
				Продолжить;
			КонецЕсли;     
			
			// "выравниваем" закрывающие СРАЗУ 
			Если Счетчик < 0 Тогда 				
				СтрокаРезультат = "(" + СтрокаРезультат;
				Прервать;							
			КонецЕсли;        				
		КонецЦикла; 
		
		// Условие выхода из внешнего Цикла  		
		ОбходСтрокиЗавершен = ?(Счетчик >= 0, Истина, Ложь);
		
	КонецЦикла;
	
	
	// "выравниваем" открывающие ПОСЛЕ обхода 
	// если Счетчик  нулевой → ниче не произойдет 
	Для ДобавитьЗакрывающихСкобок = 1 по Счетчик Цикл 		
		СтрокаРезультат = СтрокаРезультат + ")";		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти